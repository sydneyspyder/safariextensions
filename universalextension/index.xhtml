<?xml version="1.0" encoding="utf-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
	<meta name="author" content="Marc Hoyois"/>
	<meta name="description" content="The universal Safari extension"/>
	<title>Universal Safari extension</title>
	<link rel="stylesheet" href="../../styles.css"/>
</head>
<body id="top">
<header>
<h1>Universal Safari extension</h1>
<nav>
<h3 class="offscreen">Navigation</h3>
<a href="../../">Home</a> &gt; <a>Universal Extension</a>

<nav>
<h4>Resources</h4>
<ul>
	<li><a href="http://github.com/downloads/hoyois/safariextensions/UniversalExtension-1.2.safariextz">Download Universal Extension 1.2</a></li>
	<li><a href="https://github.com/hoyois/universalextension">Browse source</a></li>
</ul>
</nav>

<nav>
<h4>Contents</h4>
<ul>
	<li><a href="#examples">Examples</a></li>
</ul>
</nav>
</nav>
</header>

<div id="intro">
<p>Like a universal Turing machine, a universal extension is an extension that can reproduce the behavior of an arbitrary extension. A universal extension does not actually exist because extension bars and toolbar items cannot be created dynamically. These are however the only restrictions, and this extension is a universal extension with one bar and one toolbar item.</p>

<p>In the settings you can specify scripts to be used in the global page and in the extension’s bar. In these scripts it is possible to create context menus, toolbar menus, and toolbar popovers. The extension contains a file <code>popover.html</code> which includes the popover script specified in the settings and can be used to create popover content (see the <a href="#create_popover">example</a> below). The unique identifier for the bar, the unique identifier for the the toolbar item, and the command identifier for the toolbar item are all <code>"universal"</code>.</p>
</div>

<section id="notes">
<h3>Notes</h3>

<ul>
	<li>The <code>file://</code> protocol cannot be used in an extension’s global page. To load local files, use <code>http://localhost/</code> instead.</li>
	<li>To reload the global script after it’s been modified, simply disable and enable the extension.</li>
	<li>The extension’s bar can be hidden permanently by choosing “Hide Universal Bar” from the View menu.</li>
	<li>The <code>safari.application</code>, <code>safari.extension</code>, and <code>safari.self</code> objects can be used in the global script.</li>
	<li>Content scripts and style sheets can be added with the methods <code>addContentScript</code> and <code>addContentStyleSheet</code> of the <code>safari.extension</code> object.</li>
	<li>The <code>addContentScriptFromURL</code> and <code>addContentStyleSheetsFromURL</code> methods throw an error if the URL is external to the extension. See the <a href="#script_loader">example</a> below for a workaround.</li>
</ul>
</section>

<section id="source">
<h3>Source</h3>

<p>This is the extension’s global page:</p>

<pre>&lt;!DOCTYPE html&gt;
&lt;html&gt;
   &lt;head&gt;
      &lt;script&gt;
         if(safari.extension.settings.global) {
            var scriptElement = document.createElement("script");
            scriptElement.src = safari.extension.settings.global + "?time=" + new Date().getTime();
            document.head.appendChild(scriptElement);
         }
      &lt;/script&gt;
   &lt;/head&gt;
   &lt;body&gt;&lt;/body&gt;
&lt;/html&gt;</pre>
</section>

<section id="examples" class="init_list">
<header>
<h2>Examples</h2>
<div class="toplink"><a href="#top">To the top</a></div>
<nav>
<h4>Contents</h4>
<ul>
	<li><a href="#multiple_scripts">Loading multiple global scripts</a></li>
	<li><a href="#script_loader">Loading external scripts and style sheets</a></li>
	<li><a href="#create_popover">Using the toolbar item and creating popovers</a></li>
	<li><a href="#webm_disabler">Disabling WebM playback</a></li>
	<li><a href="#html5_blocker">Blocking HTML5 media</a></li>
</ul>
</nav>
</header>

<h3 id="multiple_scripts" class="list_item">Loading multiple global scripts</h3>

<p>The universal extension only loads one global script, so a first step to make it more useful is to have that script load any number of other scripts.</p>

<pre>var base = "http://localhost/~joeshmoe/scripts/";

function loadScripts() {
   for(var i = 0; i &lt; arguments.length; i++) {
      var scriptElement = document.createElement("script");
      scriptElement.src = base + arguments[i];
      document.head.appendChild(scriptElement);
   }
}

loadScripts("globalScript1.js", "globalScript2.js", "globalScript3.js");</pre>

<h3 id="script_loader" class="list_item">Loading external scripts and style sheets</h3>

<p>This global script can be used to load content scripts and style sheets from arbitrary URLs with a variety of parameters. Note that these scripts will not be sandboxed and the global variables they define will be visible in other scripts. The only way to add a sandboxed script is to make the whole script into a string and use the <code>addContentScript</code> method directly.</p>

<pre>function addContentScripts(scripts, whitelist, blacklist, runAtEnd, defer, async) {
   if(scripts.length === 0) return;
   var script = "function loadScripts(){for(var i=0;i&lt;arguments.length;i++){var s=document.createElement('script');" + (async ? "s.async=true;" : "") + (defer ? "s.defer=true;" : "") + "s.src=arguments[i];document.documentElement.appendChild(s);}}loadScripts('" + scripts.join("','") + "');";
   return safari.extension.addContentScript(script, whitelist, blacklist, runAtEnd);
}
function addContentStyleSheets(stylesheets, whitelist, blacklist) {
   if(stylesheets.length === 0) return;
   var script = "function loadStyleSheets(){for(var i=0;i&lt;arguments.length;i++){var s=document.createElement('link');s.rel='stylesheet';s.href=arguments[i];document.documentElement.appendChild(s);}}loadStyleSheets('" + stylesheets.join("','") + "');";
   return safari.extension.addContentStyleSheet(script, whitelist, blacklist);
}

// The script runBeforeScript.js will run on every page before the page’s own scripts
addContentScripts(["http://localhost/~joeshmoe/runBeforeScript.js"], [], [], false, false, false);

// The scripts local.js and remote.js will run on all nonsecure pages without delaying page loading
addContentScripts(["http://localhost/~joeshmoe/local.js", "http://example.com/remote.js"], [], ["https://*/*"], false, true, false);

// The style sheet pretty.css will be applied to all pages on the domain someuglysite.com
addContentStyleSheets(["http://localhost/~joeshmoe/pretty.css"], ["http://someuglysite.com/*"], []);</pre>

<h3 id="create_popover" class="list_item">Using the toolbar item and creating popovers</h3>

<p>The following code in the global script assigns a click action and a popover to the toolbar item:</p>

<pre>function setPopover(popover) {
   for(var i = 0; i &lt; safari.extension.toolbarItems.length; i++) {
      safari.extension.toolbarItems[i].popover = popover;
   }
}

var universalPopover = safari.extension.createPopover("universal", safari.extension.baseURI + "popover.html");
setPopover(universalPopover);

function onOpen(event) {
   if(event.target instanceof SafariBrowserWindow) {
      setPopover(universalPopover);
   }
}

function onCommand(event) {
   if(event.command === "universal") {
      alert("The toolbar item was clicked!");
   }
}

safari.application.addEventListener("open", onOpen, true);
safari.application.addEventListener("command", onCommand, false);</pre>

<h3 id="webm_disabler" class="list_item">Disabling WebM playback</h3>

<p>This global script redefines the <code>canPlayType</code> method of media elements so as to always return <code>""</code> on WebM MIME types. This fixes YouTube’s HTML5 player for Perian users.</p>

<pre>var script = "\
   var s = document.createElement('script');\
   s.textContent = '\
   HTMLMediaElement.prototype.canPlayTypeCopy = HTMLMediaElement.prototype.canPlayType;\
   HTMLMediaElement.prototype.canPlayType = function(type) {\
      if(/webm/.test(type)) return \"\";\
      else return this.canPlayTypeCopy.apply(this, [type]);\
   };';\
   document.documentElement.appendChild(s);";
safari.extension.addContentScript(script, [], [], false);</pre>

<h3 id="html5_blocker" class="list_item">Blocking HTML5 media</h3>

<p>This global script prevents HTML5 media elements from preloading until the “Play” button is clicked.</p>

<pre>var whitelist = ["trustedsource.com", "anothertrustedsource.com"];

function canLoad(url) {
   for(var i = 0; i &lt; whitelist.length; i++) {
      if(url.indexOf(whitelist[i]) !== -1) return true;
   }
   return false;
}

function respondToMessage(event) {
   if(event.name === "canLoad") event.message = canLoad(event.message);
}

var script = "document.addEventListener('beforeload',handleBeforeLoadEvent,true);function handleBeforeLoadEvent(event){if(!(event.target instanceof HTMLMediaElement)||safari.self.tab.canLoad(event,event.url))return;event.target.autoplay=false;event.target.preload='none';}";

safari.extension.addContentScript(script, [], [], false);
safari.application.addEventListener("message", respondToMessage, false);</pre>


</section>

<footer>
<p id="footer_left">Marc Hoyois, <time datetime="2012-03-29">March 29, 2012</time></p>
<p id="footer_right"><a href="#top">To the top</a></p>
<p id="footer_middle"><a href="http://validator.nu/?doc=http%3A%2F%2Fhoyois.github.com%2Fsafariextensions%2Funiversalextension%2F">XHTML5</a> • <a href="http://hoyois.github.com/html5outliner/?xml=true&amp;url=http%3A%2F%2Fhoyois.github.com%2Fsafariextensions%2Funiversalextension%2F">Outline</a> • <a href="http://jigsaw.w3.org/css-validator/validator?uri=http%3A%2F%2Fhoyois.github.com%2Fstyles.css&amp;profile=css3&amp;usermedium=all&amp;warning=1">CSS3</a></p>
</footer>

</body>
</html>
